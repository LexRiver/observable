import { Observable } from "./Observable";
import {Data} from 'lex-data'

const filename = '[ObservableJsonInLocalStorage]:'

export class ObservableJsonInLocalStorage<T>{
    protected observableVariable:Observable<T>
    constructor(
        protected localStorageKey: string,
        protected validatorFunction: (value:Object)=>boolean,
        loadValueFromLocalStorage: boolean,
        defaultValueIfNotInLocalStorage:T,
        onChange?:(value:Object)=>void
    ) {
        //this.observableVariable = new Observable<T>()
        if(loadValueFromLocalStorage){
            const valueInLocalStorageAsString = window.localStorage.getItem(localStorageKey)
            if(valueInLocalStorageAsString){
                // we have some value
                try {
                    const valueAsJson = JSON.parse(valueInLocalStorageAsString)
                    console.log(filename, localStorageKey, 'valueAsJson=', valueAsJson)
                    const valueIsCorrect = this.validatorFunction(valueAsJson)
                    console.log(filename, localStorageKey, 'valueIsCorrect=', valueIsCorrect)
                    if(valueIsCorrect){
                        this.observableVariable = new Observable<T>(valueAsJson, false, validatorFunction)
                    }
                } catch(error){
                    console.warn(filename,localStorageKey, 'failed to parse value from localStorage', 'valueInLocalStorageAsString=', valueInLocalStorageAsString, 'error=', error)
                }
            }
        }
        if(!this.observableVariable){
            console.log(filename, localStorageKey, 'setting default value', defaultValueIfNotInLocalStorage)
            this.observableVariable = new Observable<T>(defaultValueIfNotInLocalStorage, false, validatorFunction)
            window.localStorage.setItem(this.localStorageKey, JSON.stringify(defaultValueIfNotInLocalStorage))
        }

        this.observableVariable.onChange((newValue) => {
            const valueToPut = JSON.stringify(newValue)
            const valueInLocalStorageAsString = window.localStorage.getItem(localStorageKey)
            if(valueToPut != valueInLocalStorageAsString){
                // this is a different new value
                window.localStorage.setItem(this.localStorageKey, valueToPut) 
            }
            if(onChange){//parameter
                onChange(newValue)
            }
        })

        // warning: 'storage' event is not firing if changes were made on this page
        window.addEventListener('storage', (e) => {
            //console.log('localStorage change event, e=', e)
            if(e.key != this.localStorageKey) return
            const valueInLocalStorageAsString = window.localStorage.getItem(localStorageKey)
            if(valueInLocalStorageAsString){
                const valueAsJson = JSON.parse(valueInLocalStorageAsString)
                const valueIsCorrect = this.validatorFunction(valueAsJson)
                if(valueIsCorrect){
                    this.observableVariable.set(valueAsJson)
                }
            }
        })

    }

    get():T{
        return this.observableVariable.get()
    }

    set(value:T){
        if(Data.isEqual(this.observableVariable.get(), value)) return
        this.observableVariable.set(value)
    }

    onChange(action:(value:T)=>void){
        this.observableVariable.onChange(action)
    }

    // setByPrevious(setter:(prevValue:T)=>T){
    //     this.observableVariable.setByPrevious(setter)
    // }

    triggerOnChangeEvent(){
        this.observableVariable.triggerOnChangeEvent()
    }

    unsubscribeFromChange(action:(value:T)=>void){
        this.observableVariable.unsubscribeFromChange(action)
    }


}